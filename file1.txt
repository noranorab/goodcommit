Welcome to GoodCommit
4
Modified in working directory: CMakeLists.txt
Untracked in working directory: file1.txt
Deleted from working directory: gh.txt
Modified in working directory: main.cpp
Number of Deltas: 3
File : CMakeLists.txt
--------------------------------------------
Line Status: Modified, Content: diff --git a/CMakeLists.txt b/CMakeLists.txt
index 730f808..628f1e1 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt

Line Status: Modified, Content: @@ -4,10 +4,15 @@ project(goodcommit)

Line Status: Modified, Content: 
set(CMAKE_CXX_STANDARD 17)

find_package(Clang REQUIRED)

add_executable(
    goodcommit main.cpp
)

# Link against the library
target_link_libraries(goodcommit -lgit2)
target_include_directories(goodcommit PRIVATE ${CLANG_INCLUDE_DIRS})
target_link_libraries(goodcommit ${CLANG_LIBS})



Line Status: Modified, Content: set(CMAKE_CXX_STANDARD 17)

find_package(Clang REQUIRED)

add_executable(
    goodcommit main.cpp
)

# Link against the library
target_link_libraries(goodcommit -lgit2)
target_include_directories(goodcommit PRIVATE ${CLANG_INCLUDE_DIRS})
target_link_libraries(goodcommit ${CLANG_LIBS})



Line Status: Modified, Content: 
find_package(Clang REQUIRED)

add_executable(
    goodcommit main.cpp
)

# Link against the library
target_link_libraries(goodcommit -lgit2)
target_include_directories(goodcommit PRIVATE ${CLANG_INCLUDE_DIRS})
target_link_libraries(goodcommit ${CLANG_LIBS})



Line Status: Added, Content: find_package(Clang REQUIRED)

add_executable(
    goodcommit main.cpp
)

# Link against the library
target_link_libraries(goodcommit -lgit2)
target_include_directories(goodcommit PRIVATE ${CLANG_INCLUDE_DIRS})
target_link_libraries(goodcommit ${CLANG_LIBS})



Line Status: Added, Content: 
add_executable(
    goodcommit main.cpp
)

# Link against the library
target_link_libraries(goodcommit -lgit2)
target_include_directories(goodcommit PRIVATE ${CLANG_INCLUDE_DIRS})
target_link_libraries(goodcommit ${CLANG_LIBS})



Line Status: Modified, Content: add_executable(
    goodcommit main.cpp
)

# Link against the library
target_link_libraries(goodcommit -lgit2)
target_include_directories(goodcommit PRIVATE ${CLANG_INCLUDE_DIRS})
target_link_libraries(goodcommit ${CLANG_LIBS})



Line Status: Modified, Content:     goodcommit main.cpp
)

# Link against the library
target_link_libraries(goodcommit -lgit2)
target_include_directories(goodcommit PRIVATE ${CLANG_INCLUDE_DIRS})
target_link_libraries(goodcommit ${CLANG_LIBS})



Line Status: Modified, Content: )

# Link against the library
target_link_libraries(goodcommit -lgit2)
target_include_directories(goodcommit PRIVATE ${CLANG_INCLUDE_DIRS})
target_link_libraries(goodcommit ${CLANG_LIBS})



Line Status: Modified, Content: 
# Link against the library
target_link_libraries(goodcommit -lgit2)
target_include_directories(goodcommit PRIVATE ${CLANG_INCLUDE_DIRS})
target_link_libraries(goodcommit ${CLANG_LIBS})



Line Status: Modified, Content: # Link against the library
target_link_libraries(goodcommit -lgit2)
target_include_directories(goodcommit PRIVATE ${CLANG_INCLUDE_DIRS})
target_link_libraries(goodcommit ${CLANG_LIBS})



Line Status: Modified, Content: target_link_libraries(goodcommit -lgit2)
target_include_directories(goodcommit PRIVATE ${CLANG_INCLUDE_DIRS})
target_link_libraries(goodcommit ${CLANG_LIBS})



Line Status: Added, Content: target_include_directories(goodcommit PRIVATE ${CLANG_INCLUDE_DIRS})
target_link_libraries(goodcommit ${CLANG_LIBS})



Line Status: Added, Content: target_link_libraries(goodcommit ${CLANG_LIBS})



Line Status: Added, Content: 


Line Status: Modified, Content: 


File : gh.txt
--------------------------------------------
Line Status: Modified, Content: diff --git a/gh.txt b/gh.txt
deleted file mode 100644
index e69de29..0000000
--- a/gh.txt
+++ /dev/null


File : main.cpp
--------------------------------------------
Line Status: Modified, Content: diff --git a/main.cpp b/main.cpp
index 0edaa70..39f938a 100644
--- a/main.cpp
+++ b/main.cpp

Line Status: Modified, Content: @@ -1,5 +1,6 @@

Line Status: Modified, Content: #include <iostream>
#include <git2.h>
#include <clang-c/Index.h>
using namespace std;


int openGitRepo(git_repository **out, const char *path){
    const char* repo_path = path;
    int error = git_repository_open(out, repo_path);
    return error;
}

void handleError(int error, string message)
{
    if (error < 0){
        cout << message << endl;
        cout <<"Exited with code: " << error <<endl;
        exit(EXIT_FAILURE);
    
    }
    
}
void initWalker(git_revwalk **out, git_repository *rep)
{
    git_revwalk_new(out, rep);
    git_revwalk_push_head(*out);
}


void out(string message, string entryChange)
{
    cout << message << entryChange << endl;
}

void identifyCodeChanges(git_repository* repo)
{
    git_status_options git_status = GIT_STATUS_OPTIONS_INIT;
    git_status.show = GIT_STATUS_SHOW_INDEX_AND_WORKDIR;
    git_status.flags = GIT_STATUS_OPT_INCLUDE_UNTRACKED;

    git_status_list* git_status_list = nullptr;

    int error = git_status_list_new(&git_status_list, repo, &git_status);
    handleError(error, "Error getting status.");
    
    size_t entry_count = git_status_list_entrycount(git_status_list);
    cout <<entry_count<<endl;

    if (entry_count > 0)
    {
        for (size_t i=0; i<entry_count; ++i)
        {
            const git_status_entry* entry = git_status_byindex(git_status_list, i);
            
            switch(entry->status) 
            {
                case GIT_STATUS_CURRENT :
                    out("Added: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_INDEX_NEW :
                    out("Added to index: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_INDEX_MODIFIED :
                    out("Modified in index: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_INDEX_DELETED :
                    out("Deleted from index: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_INDEX_TYPECHANGE :
                    out("Type change in index: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_NEW :
                    out("Untracked in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_MODIFIED :
                    out("Modified in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_DELETED :
                    out("Deleted from working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_TYPECHANGE :
                    out("Type change in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_RENAMED :
                    out("Renamed in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_UNREADABLE :
                    out("Unreadable in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_IGNORED : 
                    out("Ignored: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_CONFLICTED :
                    out("Conflicted: ", entry->index_to_workdir->new_file.path);
                    break;
                default:
                    out("Unknown status for file: ",entry->index_to_workdir->new_file.path);
                    break;
            }
        }
    } else {
        cout <<"No changes identified" <<endl;
    }

    git_status_list_free(git_status_list);
}

int print_patch_line(
    const git_diff_delta *delta,       // Delta information
    const git_diff_hunk *hunk ,         // Hunk information
    const git_diff_line *line,         // Line information
    void *payload                // Custom payload (can be nullptr)
) {
    // Example: Print the content of each line

    
    std::cout << "Line Status: ";
    
    switch (line->origin) {
        case GIT_DIFF_LINE_ADDITION:
            std::cout << "Added";
            break;
        case GIT_DIFF_LINE_DELETION:
            std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content: #include <git2.h>
#include <clang-c/Index.h>
using namespace std;


int openGitRepo(git_repository **out, const char *path){
    const char* repo_path = path;
    int error = git_repository_open(out, repo_path);
    return error;
}

void handleError(int error, string message)
{
    if (error < 0){
        cout << message << endl;
        cout <<"Exited with code: " << error <<endl;
        exit(EXIT_FAILURE);
    
    }
    
}
void initWalker(git_revwalk **out, git_repository *rep)
{
    git_revwalk_new(out, rep);
    git_revwalk_push_head(*out);
}


void out(string message, string entryChange)
{
    cout << message << entryChange << endl;
}

void identifyCodeChanges(git_repository* repo)
{
    git_status_options git_status = GIT_STATUS_OPTIONS_INIT;
    git_status.show = GIT_STATUS_SHOW_INDEX_AND_WORKDIR;
    git_status.flags = GIT_STATUS_OPT_INCLUDE_UNTRACKED;

    git_status_list* git_status_list = nullptr;

    int error = git_status_list_new(&git_status_list, repo, &git_status);
    handleError(error, "Error getting status.");
    
    size_t entry_count = git_status_list_entrycount(git_status_list);
    cout <<entry_count<<endl;

    if (entry_count > 0)
    {
        for (size_t i=0; i<entry_count; ++i)
        {
            const git_status_entry* entry = git_status_byindex(git_status_list, i);
            
            switch(entry->status) 
            {
                case GIT_STATUS_CURRENT :
                    out("Added: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_INDEX_NEW :
                    out("Added to index: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_INDEX_MODIFIED :
                    out("Modified in index: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_INDEX_DELETED :
                    out("Deleted from index: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_INDEX_TYPECHANGE :
                    out("Type change in index: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_NEW :
                    out("Untracked in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_MODIFIED :
                    out("Modified in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_DELETED :
                    out("Deleted from working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_TYPECHANGE :
                    out("Type change in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_RENAMED :
                    out("Renamed in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_UNREADABLE :
                    out("Unreadable in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_IGNORED : 
                    out("Ignored: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_CONFLICTED :
                    out("Conflicted: ", entry->index_to_workdir->new_file.path);
                    break;
                default:
                    out("Unknown status for file: ",entry->index_to_workdir->new_file.path);
                    break;
            }
        }
    } else {
        cout <<"No changes identified" <<endl;
    }

    git_status_list_free(git_status_list);
}

int print_patch_line(
    const git_diff_delta *delta,       // Delta information
    const git_diff_hunk *hunk ,         // Hunk information
    const git_diff_line *line,         // Line information
    void *payload                // Custom payload (can be nullptr)
) {
    // Example: Print the content of each line

    
    std::cout << "Line Status: ";
    
    switch (line->origin) {
        case GIT_DIFF_LINE_ADDITION:
            std::cout << "Added";
            break;
        case GIT_DIFF_LINE_DELETION:
            std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content: #include <clang-c/Index.h>
using namespace std;


int openGitRepo(git_repository **out, const char *path){
    const char* repo_path = path;
    int error = git_repository_open(out, repo_path);
    return error;
}

void handleError(int error, string message)
{
    if (error < 0){
        cout << message << endl;
        cout <<"Exited with code: " << error <<endl;
        exit(EXIT_FAILURE);
    
    }
    
}
void initWalker(git_revwalk **out, git_repository *rep)
{
    git_revwalk_new(out, rep);
    git_revwalk_push_head(*out);
}


void out(string message, string entryChange)
{
    cout << message << entryChange << endl;
}

void identifyCodeChanges(git_repository* repo)
{
    git_status_options git_status = GIT_STATUS_OPTIONS_INIT;
    git_status.show = GIT_STATUS_SHOW_INDEX_AND_WORKDIR;
    git_status.flags = GIT_STATUS_OPT_INCLUDE_UNTRACKED;

    git_status_list* git_status_list = nullptr;

    int error = git_status_list_new(&git_status_list, repo, &git_status);
    handleError(error, "Error getting status.");
    
    size_t entry_count = git_status_list_entrycount(git_status_list);
    cout <<entry_count<<endl;

    if (entry_count > 0)
    {
        for (size_t i=0; i<entry_count; ++i)
        {
            const git_status_entry* entry = git_status_byindex(git_status_list, i);
            
            switch(entry->status) 
            {
                case GIT_STATUS_CURRENT :
                    out("Added: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_INDEX_NEW :
                    out("Added to index: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_INDEX_MODIFIED :
                    out("Modified in index: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_INDEX_DELETED :
                    out("Deleted from index: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_INDEX_TYPECHANGE :
                    out("Type change in index: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_NEW :
                    out("Untracked in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_MODIFIED :
                    out("Modified in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_DELETED :
                    out("Deleted from working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_TYPECHANGE :
                    out("Type change in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_RENAMED :
                    out("Renamed in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_UNREADABLE :
                    out("Unreadable in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_IGNORED : 
                    out("Ignored: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_CONFLICTED :
                    out("Conflicted: ", entry->index_to_workdir->new_file.path);
                    break;
                default:
                    out("Unknown status for file: ",entry->index_to_workdir->new_file.path);
                    break;
            }
        }
    } else {
        cout <<"No changes identified" <<endl;
    }

    git_status_list_free(git_status_list);
}

int print_patch_line(
    const git_diff_delta *delta,       // Delta information
    const git_diff_hunk *hunk ,         // Hunk information
    const git_diff_line *line,         // Line information
    void *payload                // Custom payload (can be nullptr)
) {
    // Example: Print the content of each line

    
    std::cout << "Line Status: ";
    
    switch (line->origin) {
        case GIT_DIFF_LINE_ADDITION:
            std::cout << "Added";
            break;
        case GIT_DIFF_LINE_DELETION:
            std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content: using namespace std;


int openGitRepo(git_repository **out, const char *path){
    const char* repo_path = path;
    int error = git_repository_open(out, repo_path);
    return error;
}

void handleError(int error, string message)
{
    if (error < 0){
        cout << message << endl;
        cout <<"Exited with code: " << error <<endl;
        exit(EXIT_FAILURE);
    
    }
    
}
void initWalker(git_revwalk **out, git_repository *rep)
{
    git_revwalk_new(out, rep);
    git_revwalk_push_head(*out);
}


void out(string message, string entryChange)
{
    cout << message << entryChange << endl;
}

void identifyCodeChanges(git_repository* repo)
{
    git_status_options git_status = GIT_STATUS_OPTIONS_INIT;
    git_status.show = GIT_STATUS_SHOW_INDEX_AND_WORKDIR;
    git_status.flags = GIT_STATUS_OPT_INCLUDE_UNTRACKED;

    git_status_list* git_status_list = nullptr;

    int error = git_status_list_new(&git_status_list, repo, &git_status);
    handleError(error, "Error getting status.");
    
    size_t entry_count = git_status_list_entrycount(git_status_list);
    cout <<entry_count<<endl;

    if (entry_count > 0)
    {
        for (size_t i=0; i<entry_count; ++i)
        {
            const git_status_entry* entry = git_status_byindex(git_status_list, i);
            
            switch(entry->status) 
            {
                case GIT_STATUS_CURRENT :
                    out("Added: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_INDEX_NEW :
                    out("Added to index: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_INDEX_MODIFIED :
                    out("Modified in index: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_INDEX_DELETED :
                    out("Deleted from index: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_INDEX_TYPECHANGE :
                    out("Type change in index: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_NEW :
                    out("Untracked in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_MODIFIED :
                    out("Modified in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_DELETED :
                    out("Deleted from working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_TYPECHANGE :
                    out("Type change in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_RENAMED :
                    out("Renamed in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_UNREADABLE :
                    out("Unreadable in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_IGNORED : 
                    out("Ignored: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_CONFLICTED :
                    out("Conflicted: ", entry->index_to_workdir->new_file.path);
                    break;
                default:
                    out("Unknown status for file: ",entry->index_to_workdir->new_file.path);
                    break;
            }
        }
    } else {
        cout <<"No changes identified" <<endl;
    }

    git_status_list_free(git_status_list);
}

int print_patch_line(
    const git_diff_delta *delta,       // Delta information
    const git_diff_hunk *hunk ,         // Hunk information
    const git_diff_line *line,         // Line information
    void *payload                // Custom payload (can be nullptr)
) {
    // Example: Print the content of each line

    
    std::cout << "Line Status: ";
    
    switch (line->origin) {
        case GIT_DIFF_LINE_ADDITION:
            std::cout << "Added";
            break;
        case GIT_DIFF_LINE_DELETION:
            std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content: 

int openGitRepo(git_repository **out, const char *path){
    const char* repo_path = path;
    int error = git_repository_open(out, repo_path);
    return error;
}

void handleError(int error, string message)
{
    if (error < 0){
        cout << message << endl;
        cout <<"Exited with code: " << error <<endl;
        exit(EXIT_FAILURE);
    
    }
    
}
void initWalker(git_revwalk **out, git_repository *rep)
{
    git_revwalk_new(out, rep);
    git_revwalk_push_head(*out);
}


void out(string message, string entryChange)
{
    cout << message << entryChange << endl;
}

void identifyCodeChanges(git_repository* repo)
{
    git_status_options git_status = GIT_STATUS_OPTIONS_INIT;
    git_status.show = GIT_STATUS_SHOW_INDEX_AND_WORKDIR;
    git_status.flags = GIT_STATUS_OPT_INCLUDE_UNTRACKED;

    git_status_list* git_status_list = nullptr;

    int error = git_status_list_new(&git_status_list, repo, &git_status);
    handleError(error, "Error getting status.");
    
    size_t entry_count = git_status_list_entrycount(git_status_list);
    cout <<entry_count<<endl;

    if (entry_count > 0)
    {
        for (size_t i=0; i<entry_count; ++i)
        {
            const git_status_entry* entry = git_status_byindex(git_status_list, i);
            
            switch(entry->status) 
            {
                case GIT_STATUS_CURRENT :
                    out("Added: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_INDEX_NEW :
                    out("Added to index: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_INDEX_MODIFIED :
                    out("Modified in index: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_INDEX_DELETED :
                    out("Deleted from index: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_INDEX_TYPECHANGE :
                    out("Type change in index: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_NEW :
                    out("Untracked in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_MODIFIED :
                    out("Modified in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_DELETED :
                    out("Deleted from working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_TYPECHANGE :
                    out("Type change in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_RENAMED :
                    out("Renamed in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_UNREADABLE :
                    out("Unreadable in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_IGNORED : 
                    out("Ignored: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_CONFLICTED :
                    out("Conflicted: ", entry->index_to_workdir->new_file.path);
                    break;
                default:
                    out("Unknown status for file: ",entry->index_to_workdir->new_file.path);
                    break;
            }
        }
    } else {
        cout <<"No changes identified" <<endl;
    }

    git_status_list_free(git_status_list);
}

int print_patch_line(
    const git_diff_delta *delta,       // Delta information
    const git_diff_hunk *hunk ,         // Hunk information
    const git_diff_line *line,         // Line information
    void *payload                // Custom payload (can be nullptr)
) {
    // Example: Print the content of each line

    
    std::cout << "Line Status: ";
    
    switch (line->origin) {
        case GIT_DIFF_LINE_ADDITION:
            std::cout << "Added";
            break;
        case GIT_DIFF_LINE_DELETION:
            std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content: 
int openGitRepo(git_repository **out, const char *path){
    const char* repo_path = path;
    int error = git_repository_open(out, repo_path);
    return error;
}

void handleError(int error, string message)
{
    if (error < 0){
        cout << message << endl;
        cout <<"Exited with code: " << error <<endl;
        exit(EXIT_FAILURE);
    
    }
    
}
void initWalker(git_revwalk **out, git_repository *rep)
{
    git_revwalk_new(out, rep);
    git_revwalk_push_head(*out);
}


void out(string message, string entryChange)
{
    cout << message << entryChange << endl;
}

void identifyCodeChanges(git_repository* repo)
{
    git_status_options git_status = GIT_STATUS_OPTIONS_INIT;
    git_status.show = GIT_STATUS_SHOW_INDEX_AND_WORKDIR;
    git_status.flags = GIT_STATUS_OPT_INCLUDE_UNTRACKED;

    git_status_list* git_status_list = nullptr;

    int error = git_status_list_new(&git_status_list, repo, &git_status);
    handleError(error, "Error getting status.");
    
    size_t entry_count = git_status_list_entrycount(git_status_list);
    cout <<entry_count<<endl;

    if (entry_count > 0)
    {
        for (size_t i=0; i<entry_count; ++i)
        {
            const git_status_entry* entry = git_status_byindex(git_status_list, i);
            
            switch(entry->status) 
            {
                case GIT_STATUS_CURRENT :
                    out("Added: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_INDEX_NEW :
                    out("Added to index: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_INDEX_MODIFIED :
                    out("Modified in index: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_INDEX_DELETED :
                    out("Deleted from index: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_INDEX_TYPECHANGE :
                    out("Type change in index: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_NEW :
                    out("Untracked in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_MODIFIED :
                    out("Modified in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_DELETED :
                    out("Deleted from working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_TYPECHANGE :
                    out("Type change in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_RENAMED :
                    out("Renamed in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_WT_UNREADABLE :
                    out("Unreadable in working directory: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_IGNORED : 
                    out("Ignored: ", entry->index_to_workdir->new_file.path);
                    break;
                case GIT_STATUS_CONFLICTED :
                    out("Conflicted: ", entry->index_to_workdir->new_file.path);
                    break;
                default:
                    out("Unknown status for file: ",entry->index_to_workdir->new_file.path);
                    break;
            }
        }
    } else {
        cout <<"No changes identified" <<endl;
    }

    git_status_list_free(git_status_list);
}

int print_patch_line(
    const git_diff_delta *delta,       // Delta information
    const git_diff_hunk *hunk ,         // Hunk information
    const git_diff_line *line,         // Line information
    void *payload                // Custom payload (can be nullptr)
) {
    // Example: Print the content of each line

    
    std::cout << "Line Status: ";
    
    switch (line->origin) {
        case GIT_DIFF_LINE_ADDITION:
            std::cout << "Added";
            break;
        case GIT_DIFF_LINE_DELETION:
            std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content: @@ -105,30 +106,47 @@ void identifyCodeChanges(git_repository* repo)

Line Status: Modified, Content: }

int print_patch_line(
    const git_diff_delta *delta,       // Delta information
    const git_diff_hunk *hunk ,         // Hunk information
    const git_diff_line *line,         // Line information
    void *payload                // Custom payload (can be nullptr)
) {
    // Example: Print the content of each line

    
    std::cout << "Line Status: ";
    
    switch (line->origin) {
        case GIT_DIFF_LINE_ADDITION:
            std::cout << "Added";
            break;
        case GIT_DIFF_LINE_DELETION:
            std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content: 
int print_patch_line(
    const git_diff_delta *delta,       // Delta information
    const git_diff_hunk *hunk ,         // Hunk information
    const git_diff_line *line,         // Line information
    void *payload                // Custom payload (can be nullptr)
) {
    // Example: Print the content of each line

    
    std::cout << "Line Status: ";
    
    switch (line->origin) {
        case GIT_DIFF_LINE_ADDITION:
            std::cout << "Added";
            break;
        case GIT_DIFF_LINE_DELETION:
            std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content: int print_patch_line(
    const git_diff_delta *delta,       // Delta information
    const git_diff_hunk *hunk ,         // Hunk information
    const git_diff_line *line,         // Line information
    void *payload                // Custom payload (can be nullptr)
) {
    // Example: Print the content of each line

    
    std::cout << "Line Status: ";
    
    switch (line->origin) {
        case GIT_DIFF_LINE_ADDITION:
            std::cout << "Added";
            break;
        case GIT_DIFF_LINE_DELETION:
            std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Deleted, Content:     git_diff_delta *delta,       // Delta information
    git_diff_hunk *hunk,         // Hunk information
    git_diff_line *line,         // Line information
    void *payload                // Custom payload (can be nullptr)
) {
    // Example: Print the content of each line
    std::cout << "Line: " << line->content << std::endl;

    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = size_t num_deltas = git_diff_num_deltas(diff);

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch;
        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");

    identifyCodeChanges(git_repo);
    
    
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Deleted, Content:     git_diff_hunk *hunk,         // Hunk information
    git_diff_line *line,         // Line information
    void *payload                // Custom payload (can be nullptr)
) {
    // Example: Print the content of each line
    std::cout << "Line: " << line->content << std::endl;

    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = size_t num_deltas = git_diff_num_deltas(diff);

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch;
        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");

    identifyCodeChanges(git_repo);
    
    
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Deleted, Content:     git_diff_line *line,         // Line information
    void *payload                // Custom payload (can be nullptr)
) {
    // Example: Print the content of each line
    std::cout << "Line: " << line->content << std::endl;

    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = size_t num_deltas = git_diff_num_deltas(diff);

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch;
        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");

    identifyCodeChanges(git_repo);
    
    
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     const git_diff_delta *delta,       // Delta information
    const git_diff_hunk *hunk ,         // Hunk information
    const git_diff_line *line,         // Line information
    void *payload                // Custom payload (can be nullptr)
) {
    // Example: Print the content of each line

    
    std::cout << "Line Status: ";
    
    switch (line->origin) {
        case GIT_DIFF_LINE_ADDITION:
            std::cout << "Added";
            break;
        case GIT_DIFF_LINE_DELETION:
            std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     const git_diff_hunk *hunk ,         // Hunk information
    const git_diff_line *line,         // Line information
    void *payload                // Custom payload (can be nullptr)
) {
    // Example: Print the content of each line

    
    std::cout << "Line Status: ";
    
    switch (line->origin) {
        case GIT_DIFF_LINE_ADDITION:
            std::cout << "Added";
            break;
        case GIT_DIFF_LINE_DELETION:
            std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     const git_diff_line *line,         // Line information
    void *payload                // Custom payload (can be nullptr)
) {
    // Example: Print the content of each line

    
    std::cout << "Line Status: ";
    
    switch (line->origin) {
        case GIT_DIFF_LINE_ADDITION:
            std::cout << "Added";
            break;
        case GIT_DIFF_LINE_DELETION:
            std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content:     void *payload                // Custom payload (can be nullptr)
) {
    // Example: Print the content of each line

    
    std::cout << "Line Status: ";
    
    switch (line->origin) {
        case GIT_DIFF_LINE_ADDITION:
            std::cout << "Added";
            break;
        case GIT_DIFF_LINE_DELETION:
            std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content: ) {
    // Example: Print the content of each line

    
    std::cout << "Line Status: ";
    
    switch (line->origin) {
        case GIT_DIFF_LINE_ADDITION:
            std::cout << "Added";
            break;
        case GIT_DIFF_LINE_DELETION:
            std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content:     // Example: Print the content of each line

    
    std::cout << "Line Status: ";
    
    switch (line->origin) {
        case GIT_DIFF_LINE_ADDITION:
            std::cout << "Added";
            break;
        case GIT_DIFF_LINE_DELETION:
            std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Deleted, Content:     std::cout << "Line: " << line->content << std::endl;

    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = size_t num_deltas = git_diff_num_deltas(diff);

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch;
        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");

    identifyCodeChanges(git_repo);
    
    
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content: 
    
    std::cout << "Line Status: ";
    
    switch (line->origin) {
        case GIT_DIFF_LINE_ADDITION:
            std::cout << "Added";
            break;
        case GIT_DIFF_LINE_DELETION:
            std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     
    std::cout << "Line Status: ";
    
    switch (line->origin) {
        case GIT_DIFF_LINE_ADDITION:
            std::cout << "Added";
            break;
        case GIT_DIFF_LINE_DELETION:
            std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     std::cout << "Line Status: ";
    
    switch (line->origin) {
        case GIT_DIFF_LINE_ADDITION:
            std::cout << "Added";
            break;
        case GIT_DIFF_LINE_DELETION:
            std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     
    switch (line->origin) {
        case GIT_DIFF_LINE_ADDITION:
            std::cout << "Added";
            break;
        case GIT_DIFF_LINE_DELETION:
            std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     switch (line->origin) {
        case GIT_DIFF_LINE_ADDITION:
            std::cout << "Added";
            break;
        case GIT_DIFF_LINE_DELETION:
            std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:         case GIT_DIFF_LINE_ADDITION:
            std::cout << "Added";
            break;
        case GIT_DIFF_LINE_DELETION:
            std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:             std::cout << "Added";
            break;
        case GIT_DIFF_LINE_DELETION:
            std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:             break;
        case GIT_DIFF_LINE_DELETION:
            std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:         case GIT_DIFF_LINE_DELETION:
            std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:             std::cout << "Deleted";
            break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:             break;
        default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:         default:
            std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:             std::cout << "Modified";
    }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     }

    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content: 
    std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     std::cout << ", Content: " << line->content << std::endl;
    // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content:     // Return 0 to continue processing lines
    return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content:     return 0;
}

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content: }

void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content: 
void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content: void print_diff(git_diff *diff)
{
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content: {
    size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Deleted, Content:     size_t nums_deltas = size_t num_deltas = git_diff_num_deltas(diff);

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch;
        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");

    identifyCodeChanges(git_repo);
    
    
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     size_t nums_deltas = git_diff_num_deltas(diff);
    cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     cout << "Number of Deltas: " << nums_deltas << endl;

    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content: 
    for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content:     for (size_t i=0; i < nums_deltas; ++i)
    {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content:     {
        const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content:         const git_diff_delta *delta = git_diff_get_delta(diff, i);
        out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content:         out("File : ", delta->new_file.path);

        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content: 
        git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Deleted, Content:         git_patch *patch;
        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");

    identifyCodeChanges(git_repo);
    
    
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:         git_patch *patch = nullptr;

        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content: 
        if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content:         if (git_patch_from_diff(&patch, diff, i) == GIT_OK)
        {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content:         {
            cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:             cout << "--------------------------------------------" << endl;
            git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content:             git_patch_print(patch, print_patch_line, nullptr);
            git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content:             git_patch_free(patch);
        }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content:         }
        std::cout << std::endl;
    }
}


int main(){
    cout << "Welcome to GoodCommit" << endl;
    git_libgit2_init();

    git_repository* git_repo = nullptr;
    int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content: @@ -145,10 +163,33 @@ int main(){

Line Status: Modified, Content:     int error = openGitRepo(&git_repo, "/home/nora/Bureau/goodcommit/goodcommit");

    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content: 
    handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content:     handleError(error, "Error opening the repository");
    
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Deleted, Content: 
    identifyCodeChanges(git_repo);
    
    
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     
    identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content:     identifyCodeChanges(git_repo);
    
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content:     
    //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     //Get the HEAD commit
    git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     git_oid head_oid;
    git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     git_reference_name_to_id(&head_oid, git_repo, "HEAD");
    

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content:     

    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content: 
    git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     git_commit *head_commit = nullptr;
    git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     git_commit_lookup(&head_commit, git_repo, &head_oid);
    git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     git_tree *head_tree;
    git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     git_commit_tree(&head_tree, head_commit);

    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content: 
    git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     git_index *index = nullptr;
    git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     git_repository_index(&index, git_repo);

    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content: 
    git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     git_diff *diff = nullptr;
    git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     git_diff_index_to_workdir(&diff, git_repo, index, nullptr);

    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content: 
    
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     
    print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     print_diff(diff);
    cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     cout << "i am here " << endl;

    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content: 
    git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     git_diff_free(diff);
    git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     git_index_free(index);
    git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     git_tree_free(head_tree);
    git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Added, Content:     git_commit_free(head_commit);
    git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content:     git_repository_free(git_repo);
    git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content:     git_libgit2_shutdown();
    return 0;
}
Line Status: Modified, Content:     return 0;
}

i am here 
